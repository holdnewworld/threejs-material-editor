var WEBGL_CONSTANTS={POINTS:0,LINES:1,LINE_LOOP:2,LINE_STRIP:3,TRIANGLES:4,TRIANGLE_STRIP:5,TRIANGLE_FAN:6,UNSIGNED_BYTE:5121,UNSIGNED_SHORT:5123,FLOAT:5126,UNSIGNED_INT:5125,ARRAY_BUFFER:34962,ELEMENT_ARRAY_BUFFER:34963,NEAREST:9728,LINEAR:9729,NEAREST_MIPMAP_NEAREST:9984,LINEAR_MIPMAP_NEAREST:9985,NEAREST_MIPMAP_LINEAR:9986,LINEAR_MIPMAP_LINEAR:9987,CLAMP_TO_EDGE:33071,MIRRORED_REPEAT:33648,REPEAT:10497},THREE_TO_WEBGL={};THREE_TO_WEBGL[THREE.NearestFilter]=WEBGL_CONSTANTS.NEAREST,THREE_TO_WEBGL[THREE.NearestMipmapNearestFilter]=WEBGL_CONSTANTS.NEAREST_MIPMAP_NEAREST,THREE_TO_WEBGL[THREE.NearestMipmapLinearFilter]=WEBGL_CONSTANTS.NEAREST_MIPMAP_LINEAR,THREE_TO_WEBGL[THREE.LinearFilter]=WEBGL_CONSTANTS.LINEAR,THREE_TO_WEBGL[THREE.LinearMipmapNearestFilter]=WEBGL_CONSTANTS.LINEAR_MIPMAP_NEAREST,THREE_TO_WEBGL[THREE.LinearMipmapLinearFilter]=WEBGL_CONSTANTS.LINEAR_MIPMAP_LINEAR,THREE_TO_WEBGL[THREE.ClampToEdgeWrapping]=WEBGL_CONSTANTS.CLAMP_TO_EDGE,THREE_TO_WEBGL[THREE.RepeatWrapping]=WEBGL_CONSTANTS.REPEAT,THREE_TO_WEBGL[THREE.MirroredRepeatWrapping]=WEBGL_CONSTANTS.MIRRORED_REPEAT;var PATH_PROPERTIES={scale:"scale",position:"translation",quaternion:"rotation",morphTargetInfluences:"weights"};THREE.GLTFExporter=function(){},THREE.GLTFExporter.prototype={constructor:THREE.GLTFExporter,parse:function(input,onDone,options){var DEFAULT_OPTIONS={binary:!1,trs:!1,onlyVisible:!0,truncateDrawRange:!0,embedImages:!0,maxTextureSize:1/0,animations:[],forceIndices:!1,forcePowerOfTwoTextures:!1,includeCustomExtensions:!1};0<(options=Object.assign({},DEFAULT_OPTIONS,options)).animations.length&&(options.trs=!0);var cachedCanvas,outputJSON={asset:{version:"2.0",generator:"THREE.GLTFExporter"}},byteOffset=0,buffers=[],pending=[],nodeMap=new Map,skins=[],extensionsUsed={},cachedData={meshes:new Map,attributes:new Map,attributesNormalized:new Map,materials:new Map,textures:new Map,images:new Map},uids=new Map,uid=0;function getUID(object){return uids.has(object)||uids.set(object,uid++),uids.get(object)}function equalArray(array1,array2){return array1.length===array2.length&&array1.every(function(element,index){return element===array2[index]})}function getPaddedBufferSize(bufferSize){return 4*Math.ceil(bufferSize/4)}function getPaddedArrayBuffer(arrayBuffer,paddingByte){paddingByte=paddingByte||0;var paddedLength=getPaddedBufferSize(arrayBuffer.byteLength);if(paddedLength===arrayBuffer.byteLength)return arrayBuffer;var array=new Uint8Array(paddedLength);if(array.set(new Uint8Array(arrayBuffer)),0!==paddingByte)for(var i=arrayBuffer.byteLength;i<paddedLength;i++)array[i]=paddingByte;return array.buffer}function serializeUserData(object,gltfProperty){if(0!==Object.keys(object.userData).length)try{var json=JSON.parse(JSON.stringify(object.userData));if(options.includeCustomExtensions&&json.gltfExtensions){for(var extensionName in void 0===gltfProperty.extensions&&(gltfProperty.extensions={}),json.gltfExtensions)gltfProperty.extensions[extensionName]=json.gltfExtensions[extensionName],extensionsUsed[extensionName]=!0;delete json.gltfExtensions}0<Object.keys(json).length&&(gltfProperty.extras=json)}catch(error){console.warn("THREE.GLTFExporter: userData of '"+object.name+"' won't be serialized because of JSON.stringify error - "+error.message)}}function applyTextureTransform(mapDef,texture){var didTransform=!1,transformDef={};0===texture.offset.x&&0===texture.offset.y||(transformDef.offset=texture.offset.toArray(),didTransform=!0),0!==texture.rotation&&(transformDef.rotation=texture.rotation,didTransform=!0),1===texture.repeat.x&&1===texture.repeat.y||(transformDef.scale=texture.repeat.toArray(),didTransform=!0),didTransform&&(mapDef.extensions=mapDef.extensions||{},mapDef.extensions.KHR_texture_transform=transformDef,extensionsUsed.KHR_texture_transform=!0)}function processBuffer(buffer){return outputJSON.buffers||(outputJSON.buffers=[{byteLength:0}]),buffers.push(buffer),0}function processAccessor(attribute,geometry,start,count){var componentType;if(attribute.array.constructor===Float32Array)componentType=WEBGL_CONSTANTS.FLOAT;else if(attribute.array.constructor===Uint32Array)componentType=WEBGL_CONSTANTS.UNSIGNED_INT;else if(attribute.array.constructor===Uint16Array)componentType=WEBGL_CONSTANTS.UNSIGNED_SHORT;else{if(attribute.array.constructor!==Uint8Array)throw new Error("THREE.GLTFExporter: Unsupported bufferAttribute component type.");componentType=WEBGL_CONSTANTS.UNSIGNED_BYTE}if(void 0===start&&(start=0),void 0===count&&(count=attribute.count),options.truncateDrawRange&&void 0!==geometry&&null===geometry.index){var end=start+count,end2=geometry.drawRange.count===1/0?attribute.count:geometry.drawRange.start+geometry.drawRange.count;start=Math.max(start,geometry.drawRange.start),(count=Math.min(end,end2)-start)<0&&(count=0)}if(0===count)return null;var bufferViewTarget,minMax=function(attribute,start,count){for(var output={min:new Array(attribute.itemSize).fill(Number.POSITIVE_INFINITY),max:new Array(attribute.itemSize).fill(Number.NEGATIVE_INFINITY)},i=start;i<start+count;i++)for(var a=0;a<attribute.itemSize;a++){var value=attribute.array[i*attribute.itemSize+a];output.min[a]=Math.min(output.min[a],value),output.max[a]=Math.max(output.max[a],value)}return output}(attribute,start,count);void 0!==geometry&&(bufferViewTarget=attribute===geometry.index?WEBGL_CONSTANTS.ELEMENT_ARRAY_BUFFER:WEBGL_CONSTANTS.ARRAY_BUFFER);var bufferView=function(attribute,componentType,start,count,target){var componentSize;outputJSON.bufferViews||(outputJSON.bufferViews=[]),componentSize=componentType===WEBGL_CONSTANTS.UNSIGNED_BYTE?1:componentType===WEBGL_CONSTANTS.UNSIGNED_SHORT?2:4;for(var byteLength=getPaddedBufferSize(count*attribute.itemSize*componentSize),dataView=new DataView(new ArrayBuffer(byteLength)),offset=0,i=start;i<start+count;i++)for(var a=0;a<attribute.itemSize;a++){var value=attribute.array[i*attribute.itemSize+a];componentType===WEBGL_CONSTANTS.FLOAT?dataView.setFloat32(offset,value,!0):componentType===WEBGL_CONSTANTS.UNSIGNED_INT?dataView.setUint32(offset,value,!0):componentType===WEBGL_CONSTANTS.UNSIGNED_SHORT?dataView.setUint16(offset,value,!0):componentType===WEBGL_CONSTANTS.UNSIGNED_BYTE&&dataView.setUint8(offset,value),offset+=componentSize}var gltfBufferView={buffer:processBuffer(dataView.buffer),byteOffset:byteOffset,byteLength:byteLength};return void 0!==target&&(gltfBufferView.target=target),target===WEBGL_CONSTANTS.ARRAY_BUFFER&&(gltfBufferView.byteStride=attribute.itemSize*componentSize),byteOffset+=byteLength,outputJSON.bufferViews.push(gltfBufferView),{id:outputJSON.bufferViews.length-1,byteLength:0}}(attribute,componentType,start,count,bufferViewTarget),gltfAccessor={bufferView:bufferView.id,byteOffset:bufferView.byteOffset,componentType:componentType,count:count,max:minMax.max,min:minMax.min,type:{1:"SCALAR",2:"VEC2",3:"VEC3",4:"VEC4",16:"MAT4"}[attribute.itemSize]};return outputJSON.accessors||(outputJSON.accessors=[]),outputJSON.accessors.push(gltfAccessor),outputJSON.accessors.length-1}function processImage(image,format,flipY){cachedData.images.has(image)||cachedData.images.set(image,{});var cachedImages=cachedData.images.get(image),mimeType=format===THREE.RGBAFormat?"image/png":"image/jpeg",key=mimeType+":flipY/"+flipY.toString();if(void 0!==cachedImages[key])return cachedImages[key];outputJSON.images||(outputJSON.images=[]);var gltfImage={mimeType:mimeType};if(options.embedImages){var canvas=cachedCanvas=cachedCanvas||document.createElement("canvas");canvas.width=Math.min(image.width,options.maxTextureSize),canvas.height=Math.min(image.height,options.maxTextureSize),options.forcePowerOfTwoTextures&&!function(image){return THREE.Math.isPowerOfTwo(image.width)&&THREE.Math.isPowerOfTwo(image.height)}(canvas)&&(console.warn("GLTFExporter: Resized non-power-of-two image.",image),canvas.width=THREE.Math.floorPowerOfTwo(canvas.width),canvas.height=THREE.Math.floorPowerOfTwo(canvas.height));var ctx=canvas.getContext("2d");!0===flipY&&(ctx.translate(0,canvas.height),ctx.scale(1,-1)),ctx.drawImage(image,0,0,canvas.width,canvas.height),!0===options.binary?pending.push(new Promise(function(resolve){canvas.toBlob(function(blob){(function(blob){return outputJSON.bufferViews||(outputJSON.bufferViews=[]),new Promise(function(resolve){var reader=new window.FileReader;reader.readAsArrayBuffer(blob),reader.onloadend=function(){var buffer=getPaddedArrayBuffer(reader.result),bufferView={buffer:processBuffer(buffer),byteOffset:byteOffset,byteLength:buffer.byteLength};byteOffset+=buffer.byteLength,outputJSON.bufferViews.push(bufferView),resolve(outputJSON.bufferViews.length-1)}})})(blob).then(function(bufferViewIndex){gltfImage.bufferView=bufferViewIndex,resolve()})},mimeType)})):gltfImage.uri=canvas.toDataURL(mimeType)}else gltfImage.uri=image.src;outputJSON.images.push(gltfImage);var index=outputJSON.images.length-1;return cachedImages[key]=index}function processTexture(map){if(cachedData.textures.has(map))return cachedData.textures.get(map);outputJSON.textures||(outputJSON.textures=[]);var gltfTexture={sampler:function(map){outputJSON.samplers||(outputJSON.samplers=[]);var gltfSampler={magFilter:THREE_TO_WEBGL[map.magFilter],minFilter:THREE_TO_WEBGL[map.minFilter],wrapS:THREE_TO_WEBGL[map.wrapS],wrapT:THREE_TO_WEBGL[map.wrapT]};return outputJSON.samplers.push(gltfSampler),outputJSON.samplers.length-1}(map),source:processImage(map.image,map.format,map.flipY)};map.name&&(gltfTexture.name=map.name),outputJSON.textures.push(gltfTexture);var index=outputJSON.textures.length-1;return cachedData.textures.set(map,index),index}function processMaterial(material){if(cachedData.materials.has(material))return cachedData.materials.get(material);if(outputJSON.materials||(outputJSON.materials=[]),material.isShaderMaterial&&!material.isGLTFSpecularGlossinessMaterial)return console.warn("GLTFExporter: THREE.ShaderMaterial not supported."),null;var gltfMaterial={pbrMetallicRoughness:{}};material.isMeshBasicMaterial?(gltfMaterial.extensions={KHR_materials_unlit:{}},extensionsUsed.KHR_materials_unlit=!0):material.isGLTFSpecularGlossinessMaterial?(gltfMaterial.extensions={KHR_materials_pbrSpecularGlossiness:{}},extensionsUsed.KHR_materials_pbrSpecularGlossiness=!0):material.isMeshStandardMaterial||console.warn("GLTFExporter: Use MeshStandardMaterial or MeshBasicMaterial for best results.");var color=material.color.toArray().concat([material.opacity]);if(equalArray(color,[1,1,1,1])||(gltfMaterial.pbrMetallicRoughness.baseColorFactor=color),material.isMeshStandardMaterial?(gltfMaterial.pbrMetallicRoughness.metallicFactor=material.metalness,gltfMaterial.pbrMetallicRoughness.roughnessFactor=material.roughness):material.isMeshBasicMaterial?(gltfMaterial.pbrMetallicRoughness.metallicFactor=0,gltfMaterial.pbrMetallicRoughness.roughnessFactor=.9):(gltfMaterial.pbrMetallicRoughness.metallicFactor=.5,gltfMaterial.pbrMetallicRoughness.roughnessFactor=.5),material.isGLTFSpecularGlossinessMaterial){gltfMaterial.pbrMetallicRoughness.baseColorFactor&&(gltfMaterial.extensions.KHR_materials_pbrSpecularGlossiness.diffuseFactor=gltfMaterial.pbrMetallicRoughness.baseColorFactor);var specularFactor=[1,1,1];material.specular.toArray(specularFactor,0),gltfMaterial.extensions.KHR_materials_pbrSpecularGlossiness.specularFactor=specularFactor,gltfMaterial.extensions.KHR_materials_pbrSpecularGlossiness.glossinessFactor=material.glossiness}if(material.metalnessMap||material.roughnessMap)if(material.metalnessMap===material.roughnessMap){var metalRoughMapDef={index:processTexture(material.metalnessMap)};applyTextureTransform(metalRoughMapDef,material.metalnessMap),gltfMaterial.pbrMetallicRoughness.metallicRoughnessTexture=metalRoughMapDef}else console.warn("THREE.GLTFExporter: Ignoring metalnessMap and roughnessMap because they are not the same Texture.");if(material.map){var baseColorMapDef={index:processTexture(material.map)};applyTextureTransform(baseColorMapDef,material.map),material.isGLTFSpecularGlossinessMaterial&&(gltfMaterial.extensions.KHR_materials_pbrSpecularGlossiness.diffuseTexture=baseColorMapDef),gltfMaterial.pbrMetallicRoughness.baseColorTexture=baseColorMapDef}if(material.isGLTFSpecularGlossinessMaterial&&material.specularMap){var specularMapDef={index:processTexture(material.specularMap)};applyTextureTransform(specularMapDef,material.specularMap),gltfMaterial.extensions.KHR_materials_pbrSpecularGlossiness.specularGlossinessTexture=specularMapDef}if(!(material.isMeshBasicMaterial||material.isLineBasicMaterial||material.isPointsMaterial)){var emissive=material.emissive.clone().multiplyScalar(material.emissiveIntensity).toArray();if(equalArray(emissive,[0,0,0])||(gltfMaterial.emissiveFactor=emissive),material.emissiveMap){var emissiveMapDef={index:processTexture(material.emissiveMap)};applyTextureTransform(emissiveMapDef,material.emissiveMap),gltfMaterial.emissiveTexture=emissiveMapDef}}if(material.normalMap){var normalMapDef={index:processTexture(material.normalMap)};material.normalScale&&-1!==material.normalScale.x&&(material.normalScale.x!==material.normalScale.y&&console.warn("THREE.GLTFExporter: Normal scale components are different, ignoring Y and exporting X."),normalMapDef.scale=material.normalScale.x),applyTextureTransform(normalMapDef,material.normalMap),gltfMaterial.normalTexture=normalMapDef}if(material.aoMap){var occlusionMapDef={index:processTexture(material.aoMap),texCoord:1};1!==material.aoMapIntensity&&(occlusionMapDef.strength=material.aoMapIntensity),applyTextureTransform(occlusionMapDef,material.aoMap),gltfMaterial.occlusionTexture=occlusionMapDef}material.transparent?gltfMaterial.alphaMode="BLEND":0<material.alphaTest&&(gltfMaterial.alphaMode="MASK",gltfMaterial.alphaCutoff=material.alphaTest),material.side===THREE.DoubleSide&&(gltfMaterial.doubleSided=!0),""!==material.name&&(gltfMaterial.name=material.name),serializeUserData(material,gltfMaterial),outputJSON.materials.push(gltfMaterial);var index=outputJSON.materials.length-1;return cachedData.materials.set(material,index),index}function processMesh(mesh){var cacheKey=mesh.geometry.uuid+":"+mesh.material.uuid;if(cachedData.meshes.has(cacheKey))return cachedData.meshes.get(cacheKey);var mode,geometry=mesh.geometry;if(mesh.isLineSegments)mode=WEBGL_CONSTANTS.LINES;else if(mesh.isLineLoop)mode=WEBGL_CONSTANTS.LINE_LOOP;else if(mesh.isLine)mode=WEBGL_CONSTANTS.LINE_STRIP;else if(mesh.isPoints)mode=WEBGL_CONSTANTS.POINTS;else{if(!geometry.isBufferGeometry){console.warn("GLTFExporter: Exporting THREE.Geometry will increase file size. Use THREE.BufferGeometry instead.");var geometryTemp=new THREE.BufferGeometry;geometryTemp.fromGeometry(geometry),geometry=geometryTemp}mode=mesh.drawMode===THREE.TriangleFanDrawMode?(console.warn("GLTFExporter: TriangleFanDrawMode and wireframe incompatible."),WEBGL_CONSTANTS.TRIANGLE_FAN):mesh.drawMode===THREE.TriangleStripDrawMode?mesh.material.wireframe?WEBGL_CONSTANTS.LINE_STRIP:WEBGL_CONSTANTS.TRIANGLE_STRIP:mesh.material.wireframe?WEBGL_CONSTANTS.LINES:WEBGL_CONSTANTS.TRIANGLES}var gltfMesh={},attributes={},primitives=[],targets=[],nameConversion={uv:"TEXCOORD_0",uv2:"TEXCOORD_1",color:"COLOR_0",skinWeight:"WEIGHTS_0",skinIndex:"JOINTS_0"},originalNormal=geometry.getAttribute("normal");void 0===originalNormal||function(normal){if(cachedData.attributesNormalized.has(normal))return!1;for(var v=new THREE.Vector3,i=0,il=normal.count;i<il;i++)if(5e-4<Math.abs(v.fromArray(normal.array,3*i).length()-1))return!1;return!0}(originalNormal)||(console.warn("THREE.GLTFExporter: Creating normalized normal attribute from the non-normalized one."),geometry.setAttribute("normal",function(normal){if(cachedData.attributesNormalized.has(normal))return cachedData.attributesNormalized.get(normal);for(var attribute=normal.clone(),v=new THREE.Vector3,i=0,il=attribute.count;i<il;i++)v.fromArray(attribute.array,3*i),0===v.x&&0===v.y&&0===v.z?v.setX(1):v.normalize(),v.toArray(attribute.array,3*i);return cachedData.attributesNormalized.set(normal,attribute),attribute}(originalNormal)));var modifiedAttribute=null;for(var attributeName in geometry.attributes)if("morph"!==attributeName.substr(0,5)){var attribute=geometry.attributes[attributeName];attributeName=nameConversion[attributeName]||attributeName.toUpperCase();if(/^(POSITION|NORMAL|TANGENT|TEXCOORD_\d+|COLOR_\d+|JOINTS_\d+|WEIGHTS_\d+)$/.test(attributeName)||(attributeName="_"+attributeName),cachedData.attributes.has(getUID(attribute)))attributes[attributeName]=cachedData.attributes.get(getUID(attribute));else{modifiedAttribute=null;var array=attribute.array;"JOINTS_0"!==attributeName||array instanceof Uint16Array||array instanceof Uint8Array||(console.warn('GLTFExporter: Attribute "skinIndex" converted to type UNSIGNED_SHORT.'),modifiedAttribute=new THREE.BufferAttribute(new Uint16Array(array),attribute.itemSize,attribute.normalized));var accessor=processAccessor(modifiedAttribute||attribute,geometry);null!==accessor&&(attributes[attributeName]=accessor,cachedData.attributes.set(getUID(attribute),accessor))}}if(void 0!==originalNormal&&geometry.setAttribute("normal",originalNormal),0===Object.keys(attributes).length)return null;if(void 0!==mesh.morphTargetInfluences&&0<mesh.morphTargetInfluences.length){var weights=[],targetNames=[],reverseDictionary={};if(void 0!==mesh.morphTargetDictionary)for(var key in mesh.morphTargetDictionary)reverseDictionary[mesh.morphTargetDictionary[key]]=key;for(var i=0;i<mesh.morphTargetInfluences.length;++i){var target={},warned=!1;for(var attributeName in geometry.morphAttributes)if("position"===attributeName||"normal"===attributeName){attribute=geometry.morphAttributes[attributeName][i];var gltfAttributeName=attributeName.toUpperCase(),baseAttribute=geometry.attributes[attributeName];if(cachedData.attributes.has(getUID(attribute)))target[gltfAttributeName]=cachedData.attributes.get(getUID(attribute));else{var relativeAttribute=attribute.clone();if(!geometry.morphTargetsRelative)for(var j=0,jl=attribute.count;j<jl;j++)relativeAttribute.setXYZ(j,attribute.getX(j)-baseAttribute.getX(j),attribute.getY(j)-baseAttribute.getY(j),attribute.getZ(j)-baseAttribute.getZ(j));target[gltfAttributeName]=processAccessor(relativeAttribute,geometry),cachedData.attributes.set(getUID(baseAttribute),target[gltfAttributeName])}}else warned||(console.warn("GLTFExporter: Only POSITION and NORMAL morph are supported."),warned=!0);targets.push(target),weights.push(mesh.morphTargetInfluences[i]),void 0!==mesh.morphTargetDictionary&&targetNames.push(reverseDictionary[i])}gltfMesh.weights=weights,0<targetNames.length&&(gltfMesh.extras={},gltfMesh.extras.targetNames=targetNames)}var forceIndices=options.forceIndices,isMultiMaterial=Array.isArray(mesh.material);if(isMultiMaterial&&0===geometry.groups.length)return null;!forceIndices&&null===geometry.index&&isMultiMaterial&&(console.warn("THREE.GLTFExporter: Creating index for non-indexed multi-material mesh."),forceIndices=!0);var didForceIndices=!1;if(null===geometry.index&&forceIndices){for(var indices=[],il=(i=0,geometry.attributes.position.count);i<il;i++)indices[i]=i;geometry.setIndex(indices),didForceIndices=!0}var materials=isMultiMaterial?mesh.material:[mesh.material],groups=isMultiMaterial?geometry.groups:[{materialIndex:0,start:void 0,count:void 0}];for(i=0,il=groups.length;i<il;i++){var primitive={mode:mode,attributes:attributes};if(serializeUserData(geometry,primitive),0<targets.length&&(primitive.targets=targets),null!==geometry.index){cacheKey=getUID(geometry.index);void 0===groups[i].start&&void 0===groups[i].count||(cacheKey+=":"+groups[i].start+":"+groups[i].count),cachedData.attributes.has(cacheKey)?primitive.indices=cachedData.attributes.get(cacheKey):(primitive.indices=processAccessor(geometry.index,geometry,groups[i].start,groups[i].count),cachedData.attributes.set(cacheKey,primitive.indices)),null===primitive.indices&&delete primitive.indices}var material=processMaterial(materials[groups[i].materialIndex]);null!==material&&(primitive.material=material),primitives.push(primitive)}didForceIndices&&geometry.setIndex(null),gltfMesh.primitives=primitives,outputJSON.meshes||(outputJSON.meshes=[]),outputJSON.meshes.push(gltfMesh);var index=outputJSON.meshes.length-1;return cachedData.meshes.set(cacheKey,index),index}function processAnimation(clip,root){outputJSON.animations||(outputJSON.animations=[]);for(var tracks=(clip=THREE.GLTFExporter.Utils.mergeMorphTargetTracks(clip.clone(),root)).tracks,channels=[],samplers=[],i=0;i<tracks.length;++i){var track=tracks[i],trackBinding=THREE.PropertyBinding.parseTrackName(track.name),trackNode=THREE.PropertyBinding.findNode(root,trackBinding.nodeName),trackProperty=PATH_PROPERTIES[trackBinding.propertyName];if("bones"===trackBinding.objectName&&(trackNode=!0===trackNode.isSkinnedMesh?trackNode.skeleton.getBoneByName(trackBinding.objectIndex):void 0),!trackNode||!trackProperty)return console.warn('THREE.GLTFExporter: Could not export animation track "%s".',track.name),null;var interpolation,outputItemSize=track.values.length/track.times.length;trackProperty===PATH_PROPERTIES.morphTargetInfluences&&(outputItemSize/=trackNode.morphTargetInfluences.length),!0===track.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline?(interpolation="CUBICSPLINE",outputItemSize/=3):interpolation=track.getInterpolation()===THREE.InterpolateDiscrete?"STEP":"LINEAR",samplers.push({input:processAccessor(new THREE.BufferAttribute(track.times,1)),output:processAccessor(new THREE.BufferAttribute(track.values,outputItemSize)),interpolation:interpolation}),channels.push({sampler:samplers.length-1,target:{node:nodeMap.get(trackNode),path:trackProperty}})}return outputJSON.animations.push({name:clip.name||"clip_"+outputJSON.animations.length,samplers:samplers,channels:channels}),outputJSON.animations.length-1}function processSkin(object){var node=outputJSON.nodes[nodeMap.get(object)],skeleton=object.skeleton,rootJoint=object.skeleton.bones[0];if(void 0===rootJoint)return null;for(var joints=[],inverseBindMatrices=new Float32Array(16*skeleton.bones.length),i=0;i<skeleton.bones.length;++i)joints.push(nodeMap.get(skeleton.bones[i])),skeleton.boneInverses[i].toArray(inverseBindMatrices,16*i);return void 0===outputJSON.skins&&(outputJSON.skins=[]),outputJSON.skins.push({inverseBindMatrices:processAccessor(new THREE.BufferAttribute(inverseBindMatrices,16)),joints:joints,skeleton:nodeMap.get(rootJoint)}),node.skin=outputJSON.skins.length-1}function processNode(object){outputJSON.nodes||(outputJSON.nodes=[]);var gltfNode={};if(options.trs){var rotation=object.quaternion.toArray(),position=object.position.toArray(),scale=object.scale.toArray();equalArray(rotation,[0,0,0,1])||(gltfNode.rotation=rotation),equalArray(position,[0,0,0])||(gltfNode.translation=position),equalArray(scale,[1,1,1])||(gltfNode.scale=scale)}else object.matrixAutoUpdate&&object.updateMatrix(),equalArray(object.matrix.elements,[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1])||(gltfNode.matrix=object.matrix.elements);if(""!==object.name&&(gltfNode.name=String(object.name)),serializeUserData(object,gltfNode),object.isMesh||object.isLine||object.isPoints){var mesh=processMesh(object);null!==mesh&&(gltfNode.mesh=mesh)}else if(object.isCamera)gltfNode.camera=function(camera){outputJSON.cameras||(outputJSON.cameras=[]);var isOrtho=camera.isOrthographicCamera,gltfCamera={type:isOrtho?"orthographic":"perspective"};return isOrtho?gltfCamera.orthographic={xmag:2*camera.right,ymag:2*camera.top,zfar:camera.far<=0?.001:camera.far,znear:camera.near<0?0:camera.near}:gltfCamera.perspective={aspectRatio:camera.aspect,yfov:THREE.Math.degToRad(camera.fov),zfar:camera.far<=0?.001:camera.far,znear:camera.near<0?0:camera.near},""!==camera.name&&(gltfCamera.name=camera.type),outputJSON.cameras.push(gltfCamera),outputJSON.cameras.length-1}(object);else if(object.isDirectionalLight||object.isPointLight||object.isSpotLight)extensionsUsed.KHR_lights_punctual||(outputJSON.extensions=outputJSON.extensions||{},outputJSON.extensions.KHR_lights_punctual={lights:[]},extensionsUsed.KHR_lights_punctual=!0),gltfNode.extensions=gltfNode.extensions||{},gltfNode.extensions.KHR_lights_punctual={light:function(light){var lightDef={};light.name&&(lightDef.name=light.name),lightDef.color=light.color.toArray(),lightDef.intensity=light.intensity,light.isDirectionalLight?lightDef.type="directional":light.isPointLight?(lightDef.type="point",0<light.distance&&(lightDef.range=light.distance)):light.isSpotLight&&(lightDef.type="spot",0<light.distance&&(lightDef.range=light.distance),lightDef.spot={},lightDef.spot.innerConeAngle=(light.penumbra-1)*light.angle*-1,lightDef.spot.outerConeAngle=light.angle),void 0!==light.decay&&2!==light.decay&&console.warn("THREE.GLTFExporter: Light decay may be lost. glTF is physically-based, and expects light.decay=2."),!light.target||light.target.parent===light&&0===light.target.position.x&&0===light.target.position.y&&-1===light.target.position.z||console.warn("THREE.GLTFExporter: Light direction may be lost. For best results, make light.target a child of the light with position 0,0,-1.");var lights=outputJSON.extensions.KHR_lights_punctual.lights;return lights.push(lightDef),lights.length-1}(object)};else if(object.isLight)return console.warn("THREE.GLTFExporter: Only directional, point, and spot lights are supported.",object),null;if(object.isSkinnedMesh&&skins.push(object),0<object.children.length){for(var children=[],i=0,l=object.children.length;i<l;i++){var child=object.children[i];if(child.visible||!1===options.onlyVisible){var node=processNode(child);null!==node&&children.push(node)}}0<children.length&&(gltfNode.children=children)}outputJSON.nodes.push(gltfNode);var nodeIndex=outputJSON.nodes.length-1;return nodeMap.set(object,nodeIndex),nodeIndex}function processScene(scene){outputJSON.scenes||(outputJSON.scenes=[],outputJSON.scene=0);var gltfScene={nodes:[]};""!==scene.name&&(gltfScene.name=scene.name),scene.userData&&0<Object.keys(scene.userData).length&&(gltfScene.extras=serializeUserData(scene)),outputJSON.scenes.push(gltfScene);for(var nodes=[],i=0,l=scene.children.length;i<l;i++){var child=scene.children[i];if(child.visible||!1===options.onlyVisible){var node=processNode(child);null!==node&&nodes.push(node)}}0<nodes.length&&(gltfScene.nodes=nodes),serializeUserData(scene,gltfScene)}!function(input){input=input instanceof Array?input:[input];for(var objectsWithoutScene=[],i=0;i<input.length;i++)input[i]instanceof THREE.Scene?processScene(input[i]):objectsWithoutScene.push(input[i]);for(0<objectsWithoutScene.length&&function(objects){var scene=new THREE.Scene;scene.name="AuxScene";for(var i=0;i<objects.length;i++)scene.children.push(objects[i]);processScene(scene)}(objectsWithoutScene),i=0;i<skins.length;++i)processSkin(skins[i]);for(i=0;i<options.animations.length;++i)processAnimation(options.animations[i],input[0])}(input),Promise.all(pending).then(function(){var blob=new Blob(buffers,{type:"application/octet-stream"}),extensionsUsedList=Object.keys(extensionsUsed);if(0<extensionsUsedList.length&&(outputJSON.extensionsUsed=extensionsUsedList),outputJSON.buffers&&0<outputJSON.buffers.length){outputJSON.buffers[0].byteLength=blob.size;var reader=new window.FileReader;if(!0===options.binary){reader.readAsArrayBuffer(blob),reader.onloadend=function(){var binaryChunk=getPaddedArrayBuffer(reader.result),binaryChunkPrefix=new DataView(new ArrayBuffer(8));binaryChunkPrefix.setUint32(0,binaryChunk.byteLength,!0),binaryChunkPrefix.setUint32(4,5130562,!0);var jsonChunk=getPaddedArrayBuffer(function(text){if(void 0!==window.TextEncoder)return(new TextEncoder).encode(text).buffer;for(var array=new Uint8Array(new ArrayBuffer(text.length)),i=0,il=text.length;i<il;i++){var value=text.charCodeAt(i);array[i]=255<value?32:value}return array.buffer}(JSON.stringify(outputJSON)),32),jsonChunkPrefix=new DataView(new ArrayBuffer(8));jsonChunkPrefix.setUint32(0,jsonChunk.byteLength,!0),jsonChunkPrefix.setUint32(4,1313821514,!0);var header=new ArrayBuffer(12),headerView=new DataView(header);headerView.setUint32(0,1179937895,!0),headerView.setUint32(4,2,!0);var totalByteLength=12+jsonChunkPrefix.byteLength+jsonChunk.byteLength+binaryChunkPrefix.byteLength+binaryChunk.byteLength;headerView.setUint32(8,totalByteLength,!0);var glbBlob=new Blob([header,jsonChunkPrefix,jsonChunk,binaryChunkPrefix,binaryChunk],{type:"application/octet-stream"}),glbReader=new window.FileReader;glbReader.readAsArrayBuffer(glbBlob),glbReader.onloadend=function(){onDone(glbReader.result)}}}else reader.readAsDataURL(blob),reader.onloadend=function(){var base64data=reader.result;outputJSON.buffers[0].uri=base64data,onDone(outputJSON)}}else onDone(outputJSON)})}},THREE.GLTFExporter.Utils={insertKeyframe:function(track,time){var index,valueSize=track.getValueSize(),times=new track.TimeBufferType(track.times.length+1),values=new track.ValueBufferType(track.values.length+valueSize),interpolant=track.createInterpolant(new track.ValueBufferType(valueSize));if(0===track.times.length){times[0]=time;for(var i=0;i<valueSize;i++)values[i]=0;index=0}else if(time<track.times[0]){if(Math.abs(track.times[0]-time)<.001)return 0;times[0]=time,times.set(track.times,1),values.set(interpolant.evaluate(time),0),values.set(track.values,valueSize),index=0}else if(time>track.times[track.times.length-1]){if(Math.abs(track.times[track.times.length-1]-time)<.001)return track.times.length-1;times[times.length-1]=time,times.set(track.times,0),values.set(track.values,0),values.set(interpolant.evaluate(time),track.values.length),index=times.length-1}else for(i=0;i<track.times.length;i++){if(Math.abs(track.times[i]-time)<.001)return i;if(track.times[i]<time&&track.times[i+1]>time){times.set(track.times.slice(0,i+1),0),times[i+1]=time,times.set(track.times.slice(i+1),i+2),values.set(track.values.slice(0,(i+1)*valueSize),0),values.set(interpolant.evaluate(time),(i+1)*valueSize),values.set(track.values.slice((i+1)*valueSize),(i+2)*valueSize),index=i+1;break}}return track.times=times,track.values=values,index},mergeMorphTargetTracks:function(clip,root){for(var tracks=[],mergedTracks={},sourceTracks=clip.tracks,i=0;i<sourceTracks.length;++i){var sourceTrack=sourceTracks[i],sourceTrackBinding=THREE.PropertyBinding.parseTrackName(sourceTrack.name),sourceTrackNode=THREE.PropertyBinding.findNode(root,sourceTrackBinding.nodeName);if("morphTargetInfluences"===sourceTrackBinding.propertyName&&void 0!==sourceTrackBinding.propertyIndex){if(sourceTrack.createInterpolant!==sourceTrack.InterpolantFactoryMethodDiscrete&&sourceTrack.createInterpolant!==sourceTrack.InterpolantFactoryMethodLinear){if(sourceTrack.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline)throw new Error("THREE.GLTFExporter: Cannot merge tracks with glTF CUBICSPLINE interpolation.");console.warn("THREE.GLTFExporter: Morph target interpolation mode not yet supported. Using LINEAR instead."),(sourceTrack=sourceTrack.clone()).setInterpolation(THREE.InterpolateLinear)}var mergedTrack,targetCount=sourceTrackNode.morphTargetInfluences.length,targetIndex=sourceTrackNode.morphTargetDictionary[sourceTrackBinding.propertyIndex];if(void 0===targetIndex)throw new Error("THREE.GLTFExporter: Morph target name not found: "+sourceTrackBinding.propertyIndex);if(void 0!==mergedTracks[sourceTrackNode.uuid]){var sourceInterpolant=sourceTrack.createInterpolant(new sourceTrack.ValueBufferType(1));mergedTrack=mergedTracks[sourceTrackNode.uuid];for(j=0;j<mergedTrack.times.length;j++)mergedTrack.values[j*targetCount+targetIndex]=sourceInterpolant.evaluate(mergedTrack.times[j]);for(j=0;j<sourceTrack.times.length;j++){var keyframeIndex=this.insertKeyframe(mergedTrack,sourceTrack.times[j]);mergedTrack.values[keyframeIndex*targetCount+targetIndex]=sourceTrack.values[j]}}else{for(var values=new((mergedTrack=sourceTrack.clone()).ValueBufferType)(targetCount*mergedTrack.times.length),j=0;j<mergedTrack.times.length;j++)values[j*targetCount+targetIndex]=mergedTrack.values[j];mergedTrack.name=".morphTargetInfluences",mergedTrack.values=values,mergedTracks[sourceTrackNode.uuid]=mergedTrack,tracks.push(mergedTrack)}}else tracks.push(sourceTrack)}return clip.tracks=tracks,clip}};