THREE.DrcobjExporter=function(){function DrcobjExporter(){}return DrcobjExporter.prototype.parse=function(json,options){var outputDataBuffer,sumGeometryBuffersByteLength=0;void 0===options&&(options={});for(var drcGeometries=this.drcParse(json,options),i=0;i<json.geometries.length;i++){var geometryBufferByteLength=drcGeometries[i].byteLength;json.geometries[i].data={offset:sumGeometryBuffersByteLength,byteLength:geometryBufferByteLength},sumGeometryBuffersByteLength+=geometryBufferByteLength}var jsonBuffer=function(str){for(var buffer=new ArrayBuffer(str.length),bufferView=new Uint8Array(buffer),i=0,strLen=str.length;i<strLen;i++)bufferView[i]=str.charCodeAt(i);return buffer}(JSON.stringify(json));outputDataBuffer=new ArrayBuffer(4+jsonBuffer.byteLength+sumGeometryBuffersByteLength);var modelDataSize=new Uint32Array(outputDataBuffer,0,1),modelData=new Uint8Array(outputDataBuffer,4,jsonBuffer.byteLength),modelGeometries=new Int8Array(outputDataBuffer,4+jsonBuffer.byteLength,sumGeometryBuffersByteLength);modelDataSize[0]=jsonBuffer.byteLength,modelData.set(new Uint8Array(jsonBuffer));for(var j=0,offset=0;j<drcGeometries.length;j++)modelGeometries.set(drcGeometries[j],offset),offset+=drcGeometries[j].byteLength;if(options.isDeflate){var ui8OutputDataBuffer=new Uint8Array(outputDataBuffer);outputDataBuffer=new Zlib.Deflate(ui8OutputDataBuffer).compress()}return outputDataBuffer},DrcobjExporter.prototype.drcParse=function(json,options){var drcGeometries=[],dracoExporter=new THREE.DRACOExporter,bufferGeometryLoader=new THREE.BufferGeometryLoader;void 0===options.decodeSpeed&&(options.decodeSpeed=5),void 0===options.encodeSpeed&&(options.encodeSpeed=5),void 0===options.encoderMethod&&(options.encoderMethod=THREE.DRACOExporter.MESH_EDGEBREAKER_ENCODING),void 0===options.quantization&&(options.quantization=[16,10,8,10,8]),void 0===options.exportUvs&&(options.exportUvs=!0),void 0===options.exportNormals&&(options.exportNormals=!0),void 0===options.exportColor&&(options.exportColor=!1);for(var i=0;i<json.geometries.length;i++){var geometry=bufferGeometryLoader.parse(json.geometries[i]),drcGeometry=dracoExporter.parse(geometry,options);drcGeometries.push(drcGeometry)}return drcGeometries},DrcobjExporter}();